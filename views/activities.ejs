<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="/css/styles.css">
    <title>Monthly Record</title>
</head>
<body>
    <div class="sidebar">
        <img class="arrows" src="https://i.pinimg.com/564x/d4/60/fe/d460fe089360a8776144942b2e526087.jpg">
        <h2>Healro</h2>
        <nav>
            <ul>
                <li><a href="/">Home</a></li>
                <li><a href="/profile/<%= user.id %>">Profile</a></li>
                <li><a href="/activities">Activities</a></li>
                <li><a href="/contents">Contents</a></li>
                <li><a href="/posting">My Feed</a></li>
                <li><a href="/communities">Communities</a></li>
            </ul>
        </nav>
    </div>
        <!-- Main Content -->
    <div class="main-content">
        <header>
            <h1>Healro</h1>
            <nav>
                <ul>
                    <li><form action="/logout" method="post" style="display:inline;"><button type="submit">Log Off</button></form></li>
                </ul>
            </nav>
        </header>
        <section class="my-activities">

            <!--activity topics: view only-->
            <!-- <div class="activity-topics">
                <h2>Monthly Record</h2>
                <ul>
                    <li>General</li>
                    <li>Sleep</li>
                    <li>Nutrition</li>
                    <li>Training</li>
                    <li>Others</li>
                </ul>
            </div> -->
            
            <!-- Calendar -->
            <div class="calendar">
                <h2>Select Month</h2>
                <div class="monthSelect">
                    <!-- Calendar Content -->
                    <input type="month" class="calendar-input" id="calendarInput">
                </div>
                <div class="calendar-grid" id="calendarGrid">
                    
                    <!-- Calendar dates will be dynamically generated here -->
                </div>
            </div>


            <!-- activities data and notes-->
            <div class="tools">
                <!--activity data-->
                <div class="activity-data">
                    <h2>Selected Date: <span id="selectedDate"></span></h2>
                    <div id="health-stats"></div>
                    <!-- Data will be populated here when a date is clicked -->
                </div>

                <div class="notes">
                    <h2>Notes</h2>
                    <div class="notes-content" id="notes-content">
                        <p>Select a date to view your notes.</p>
                        <!-- Notes will display here when a date is clicked -->
                    </div>
                    <textarea placeholder="Write your notes here..."></textarea>
                    <button id="save-notes-button">Save Notes</button>
                </div>
                
            </div>
        </section>
            
        <!--removed customise(input data function in activities page)-->
        <!-- <button class="customize-button" onclick="openCustomizePopup()">Customize</button> -->

        <section class="connections">
            
        </section>
        
    </div>
    <footer>
        <p>&copy; 2024 Healro. All rights reserved.</p>
    </footer>


    <!--extract date from database-->
    <script src="/js/activities.js"></script>

    <!--generate calendar-->
    <!-- <script>
        document.getElementById('calendarInput').addEventListener('change', function() {
        const calendarGrid = document.querySelector('.calendar-grid');
        calendarGrid.innerHTML = ''; // Clear previous dates
        
        const selectedDate = new Date(this.value);
        const year = selectedDate.getFullYear();
        const month = selectedDate.getMonth();
        
        const firstDayOfMonth = new Date(year, month, 1);
        const lastDayOfMonth = new Date(year, month + 1, 0);
        
        const firstDayOfWeek = firstDayOfMonth.getDay(); // Day of the week (0 for Sunday, 6 for Saturday)
        const daysInMonth = lastDayOfMonth.getDate(); // Total number of days in the month
        
        // Adjusting for Monday as the first day of the week
        const adjustedFirstDay = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;
        
        // Add empty cells before the start of the month
        for (let i = 0; i < adjustedFirstDay; i++) {
            const emptyCell = document.createElement('div');
            calendarGrid.appendChild(emptyCell);
        }
        
        // Add actual days of the month
        for (let day = 1; day <= daysInMonth; day++) {
            const dateCell = document.createElement('div');
            dateCell.classList.add('calendar-date');
            dateCell.textContent = day;
            
            // Attach click event to each date cell
            dateCell.addEventListener('click', function() {
                // Here you can handle the logic to store/retrieve information from the database
                alert(`You clicked on ${day}/${month + 1}/${year}`);
                // Perform database operations here
            });
            
            calendarGrid.appendChild(dateCell);
        }
    });
    </script> -->
    
    <script>
        //generate calendar and fetch health-stats
document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('calendarInput').addEventListener('change', function() {
        const calendarGrid = document.querySelector('.calendar-grid');
        calendarGrid.innerHTML = ''; // Clear previous dates
        
        const selectedDate = new Date(this.value);
        const year = selectedDate.getFullYear();
        const month = selectedDate.getMonth();
        
        const firstDayOfMonth = new Date(year, month, 1);
        const lastDayOfMonth = new Date(year, month + 1, 0);
        
        const firstDayOfWeek = firstDayOfMonth.getDay();
        const daysInMonth = lastDayOfMonth.getDate();
        
        const adjustedFirstDay = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;
        
        for (let i = 0; i < adjustedFirstDay; i++) {
            const emptyCell = document.createElement('div');
            calendarGrid.appendChild(emptyCell);
        }
        
        // Add actual days of the month
        for (let day = 1; day <= daysInMonth; day++) {
            const dateCell = document.createElement('div');
            dateCell.classList.add('calendar-date');
            dateCell.textContent = day;
            
            dateCell.addEventListener('click', function() {
                const selectedDate = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;

                // Fetch health data for the selected date
                fetch(`/get-health-data?date=${selectedDate}`)
                    .then(response => response.json())
                    .then(data => {
                        const dataContainer = document.querySelector('.activity-data');
                        dataContainer.innerHTML = '';  // Clear previous data

                        if (data.length > 0) {
                            data.forEach(stat => {
                                dataContainer.innerHTML += `
                                    <div class="post">
                                        <p><strong>Date: ${new Date(stat.date).toLocaleDateString()}</strong></p>
                                        <p>Calories: ${stat.calories}</p>
                                        <p>Steps: ${stat.steps}</p>
                                        <p>MVPA: ${stat.mvpa}</p>
                                        <p>Sleep: ${stat.sleep} hours</p>
                                    </div>`;
                            });
                        } else {
                            dataContainer.innerHTML = '<p>No data available for this date.</p>';
                        }
                    })
                    .catch(error => console.error('Error fetching health data:', error));
            });

            calendarGrid.appendChild(dateCell);
        }
    });
});


// Function to fetch notes for a selected date
function fetchNotes(date) {
    fetch(`/get-notes?date=${date}`)
        .then(response => response.json())
        .then(data => {
            if (data && data.note) {
                notesContentDiv.innerHTML = `<p>${data.note}</p>`;
                notesTextarea.value = data.note;
            } else {
                notesContentDiv.innerHTML = '<p>No notes for this date.</p>';
                notesTextarea.value = '';
            }
        })
        .catch(error => {
            console.error('Error fetching notes:', error);
        });
}

    </script>
</body>
</html>
